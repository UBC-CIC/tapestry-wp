AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'Deployment Template for Tapestry''s Cloud Resources

  '
Globals:
  Function:
    Runtime: nodejs16.x
    Timeout: 25
    MemorySize: 512
Resources:
  TapestryVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
      - Key: Name
        Value: TapestryVPC
  TapestryVPCSubnet1:
    Type: AWS::EC2::Subnet
    DependsOn: TapestryVPC
    Properties:
      AvailabilityZone: ca-central-1b
      CidrBlock: 10.0.1.0/24
      EnableDns64: false
      VpcId:
        Ref: TapestryVPC
      Tags:
      - Key: Name
        Value: TapestrySubnet1
  TapestryVPCSubnet2:
    Type: AWS::EC2::Subnet
    DependsOn: TapestryVPC
    Properties:
      AvailabilityZone: ca-central-1a
      CidrBlock: 10.0.0.0/24
      EnableDns64: false
      VpcId:
        Ref: TapestryVPC
      Tags:
      - Key: Name
        Value: TapestrySubnet2
  RouteTable:
    Type: AWS::EC2::RouteTable
    DependsOn: TapestryVPC
    Properties:
      VpcId:
        Ref: TapestryVPC
      Tags:
      - Key: Name
        Value: TapestryVPCRouteTable
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: TapestryVPCInternet
  GatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    DependsOn:
    - TapestryVPC
    - InternetGateway
    Properties:
      InternetGatewayId:
        Ref: InternetGateway
      VpcId:
        Ref: TapestryVPC
  Route1:
    Type: AWS::EC2::Route
    DependsOn:
    - InternetGateway
    - RouteTable
    - GatewayAttachment
    Properties:
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId:
        Ref: InternetGateway
      RouteTableId:
        Ref: RouteTable
  AssociationSubnet1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
    - RouteTable
    - TapestryVPCSubnet1
    Properties:
      RouteTableId:
        Ref: RouteTable
      SubnetId:
        Ref: TapestryVPCSubnet1
  AssociationSubnet2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
    - RouteTable
    - TapestryVPCSubnet2
    Properties:
      RouteTableId:
        Ref: RouteTable
      SubnetId:
        Ref: TapestryVPCSubnet2
  NeptuneSubnetGroup:
    Type: AWS::Neptune::DBSubnetGroup
    DependsOn:
    - TapestryVPCSubnet1
    - TapestryVPCSubnet2
    Properties:
      DBSubnetGroupDescription: Subnet group for Tapestry's Neptune Database
      DBSubnetGroupName: neptune-subnet-group
      SubnetIds:
      - Ref: TapestryVPCSubnet1
      - Ref: TapestryVPCSubnet2
  NeptuneDBCluster:
    Type: AWS::Neptune::DBCluster
    DependsOn:
    - NeptuneSubnetGroup
    Properties:
      AvailabilityZones:
      - ca-central-1a
      - ca-central-1b
      DBClusterIdentifier: tapestry-neptune-cluster
      DBSubnetGroupName: neptune-subnet-group
      EngineVersion: 1.0.5.1
      Port: 8182
  NeptuneDBInstance:
    Type: AWS::Neptune::DBInstance
    DependsOn:
    - NeptuneDBCluster
    - NeptuneSubnetGroup
    Properties:
      AvailabilityZone: ca-central-1a
      DBClusterIdentifier: tapestry-neptune-cluster
      DBInstanceClass: db.t3.medium
      DBInstanceIdentifier: tapestry-neptune-instance
      DBSubnetGroupName: neptune-subnet-group
  LambdaLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      ContentUri: ..\..\layer
      LayerName: LambdaLayerTapestry
  GetTapestryNodes:
    Type: AWS::Serverless::Function
    DependsOn:
    - TapestryVPC
    - TapestryVPCSubnet1
    - TapestryVPCSubnet2
    - NeptuneDBInstance
    Properties:
      CodeUri: GetTapestryNodes
      Handler: index.handler
      Runtime: nodejs16.x
      FunctionName: getTapestryNodesTapestry
      VpcConfig:
        SecurityGroupIds:
        - Fn::GetAtt:
          - TapestryVPC
          - DefaultSecurityGroup
        SubnetIds:
        - Ref: TapestryVPCSubnet1
        - Ref: TapestryVPCSubnet2
      Environment:
        Variables:
          NEPTUNE_PORT: 8182
          NEPTUNE_ENDPOINT:
            Fn::GetAtt:
            - NeptuneDBInstance
            - Endpoint
          USE_IAM: false
      Layers:
      - Ref: LambdaLayer
      Events:
        TapestryDepAPI:
          Type: HttpApi
          Properties:
            Path: /getTapestryNodes
            Method: get
    Metadata:
      SamResourceId: GetTapestryNodes
  AddNode:
    Type: AWS::Serverless::Function
    DependsOn:
    - TapestryVPC
    - TapestryVPCSubnet1
    - TapestryVPCSubnet2
    - NeptuneDBInstance
    Properties:
      CodeUri: AddNode
      Handler: index.handler
      Runtime: nodejs16.x
      FunctionName: addNodeTapestry
      VpcConfig:
        SecurityGroupIds:
        - Fn::GetAtt:
          - TapestryVPC
          - DefaultSecurityGroup
        SubnetIds:
        - Ref: TapestryVPCSubnet1
        - Ref: TapestryVPCSubnet2
      Environment:
        Variables:
          NEPTUNE_PORT: 8182
          NEPTUNE_ENDPOINT:
            Fn::GetAtt:
            - NeptuneDBInstance
            - Endpoint
          USE_IAM: false
      Layers:
      - Ref: LambdaLayer
      Events:
        TapestryDepAPI:
          Type: HttpApi
          Properties:
            Path: /addNode
            Method: post
    Metadata:
      SamResourceId: AddNode
  AddEdge:
    Type: AWS::Serverless::Function
    DependsOn:
    - TapestryVPC
    - TapestryVPCSubnet1
    - TapestryVPCSubnet2
    - NeptuneDBInstance
    Properties:
      CodeUri: AddEdge
      Handler: index.handler
      Runtime: nodejs16.x
      FunctionName: addEdgeTapestry
      VpcConfig:
        SecurityGroupIds:
        - Fn::GetAtt:
          - TapestryVPC
          - DefaultSecurityGroup
        SubnetIds:
        - Ref: TapestryVPCSubnet1
        - Ref: TapestryVPCSubnet2
      Environment:
        Variables:
          NEPTUNE_PORT: 8182
          NEPTUNE_ENDPOINT:
            Fn::GetAtt:
            - NeptuneDBInstance
            - Endpoint
          USE_IAM: false
      Layers:
      - Ref: LambdaLayer
      Events:
        TapestryDepAPI:
          Type: HttpApi
          Properties:
            Path: /addEdge
            Method: post
    Metadata:
      SamResourceId: AddEdge
  AddTapestry:
    Type: AWS::Serverless::Function
    DependsOn:
    - TapestryVPC
    - TapestryVPCSubnet1
    - TapestryVPCSubnet2
    - NeptuneDBInstance
    Properties:
      CodeUri: AddTapestry
      Handler: index.handler
      Runtime: nodejs16.x
      FunctionName: addTapestryTapestry
      VpcConfig:
        SecurityGroupIds:
        - Fn::GetAtt:
          - TapestryVPC
          - DefaultSecurityGroup
        SubnetIds:
        - Ref: TapestryVPCSubnet1
        - Ref: TapestryVPCSubnet2
      Environment:
        Variables:
          NEPTUNE_PORT: 8182
          NEPTUNE_ENDPOINT:
            Fn::GetAtt:
            - NeptuneDBInstance
            - Endpoint
          USE_IAM: false
      Layers:
      - Ref: LambdaLayer
      Events:
        TapestryDepAPI:
          Type: HttpApi
          Properties:
            Path: /addTapestry
            Method: post
    Metadata:
      SamResourceId: AddTapestry
  AddUser:
    Type: AWS::Serverless::Function
    DependsOn:
    - TapestryVPC
    - TapestryVPCSubnet1
    - TapestryVPCSubnet2
    - NeptuneDBInstance
    Properties:
      CodeUri: AddUser
      Handler: index.handler
      Runtime: nodejs16.x
      FunctionName: addUserTapestry
      VpcConfig:
        SecurityGroupIds:
        - Fn::GetAtt:
          - TapestryVPC
          - DefaultSecurityGroup
        SubnetIds:
        - Ref: TapestryVPCSubnet1
        - Ref: TapestryVPCSubnet2
      Environment:
        Variables:
          NEPTUNE_PORT: 8182
          NEPTUNE_ENDPOINT:
            Fn::GetAtt:
            - NeptuneDBInstance
            - Endpoint
          USE_IAM: false
      Layers:
      - Ref: LambdaLayer
      Events:
        TapestryDepAPI:
          Type: HttpApi
          Properties:
            Path: /addUser
            Method: post
    Metadata:
      SamResourceId: AddUser
  DeleteEdge:
    Type: AWS::Serverless::Function
    DependsOn:
    - TapestryVPC
    - TapestryVPCSubnet1
    - TapestryVPCSubnet2
    - NeptuneDBInstance
    Properties:
      CodeUri: DeleteEdge
      Handler: index.handler
      Runtime: nodejs16.x
      FunctionName: deleteEdgeTapestry
      VpcConfig:
        SecurityGroupIds:
        - Fn::GetAtt:
          - TapestryVPC
          - DefaultSecurityGroup
        SubnetIds:
        - Ref: TapestryVPCSubnet1
        - Ref: TapestryVPCSubnet2
      Environment:
        Variables:
          NEPTUNE_PORT: 8182
          NEPTUNE_ENDPOINT:
            Fn::GetAtt:
            - NeptuneDBInstance
            - Endpoint
          USE_IAM: false
      Layers:
      - Ref: LambdaLayer
      Events:
        TapestryDepAPI:
          Type: HttpApi
          Properties:
            Path: /deleteEdge
            Method: delete
    Metadata:
      SamResourceId: DeleteEdge
  DeleteVertex:
    Type: AWS::Serverless::Function
    DependsOn:
    - TapestryVPC
    - TapestryVPCSubnet1
    - TapestryVPCSubnet2
    - NeptuneDBInstance
    Properties:
      CodeUri: DeleteVertex
      Handler: index.handler
      Runtime: nodejs16.x
      FunctionName: deleteVertexTapestry
      VpcConfig:
        SecurityGroupIds:
        - Fn::GetAtt:
          - TapestryVPC
          - DefaultSecurityGroup
        SubnetIds:
        - Ref: TapestryVPCSubnet1
        - Ref: TapestryVPCSubnet2
      Environment:
        Variables:
          NEPTUNE_PORT: 8182
          NEPTUNE_ENDPOINT:
            Fn::GetAtt:
            - NeptuneDBInstance
            - Endpoint
          USE_IAM: false
      Layers:
      - Ref: LambdaLayer
      Events:
        TapestryDepAPI:
          Type: HttpApi
          Properties:
            Path: /deleteVertex
            Method: delete
    Metadata:
      SamResourceId: DeleteVertex
  IsChildNodeOfTapestry:
    Type: AWS::Serverless::Function
    DependsOn:
    - TapestryVPC
    - TapestryVPCSubnet1
    - TapestryVPCSubnet2
    - NeptuneDBInstance
    Properties:
      CodeUri: IsChildNodeOfTapestry
      Handler: index.handler
      Runtime: nodejs16.x
      FunctionName: isChildNodeOfTapestryTapestry
      VpcConfig:
        SecurityGroupIds:
        - Fn::GetAtt:
          - TapestryVPC
          - DefaultSecurityGroup
        SubnetIds:
        - Ref: TapestryVPCSubnet1
        - Ref: TapestryVPCSubnet2
      Environment:
        Variables:
          NEPTUNE_PORT: 8182
          NEPTUNE_ENDPOINT:
            Fn::GetAtt:
            - NeptuneDBInstance
            - Endpoint
          USE_IAM: false
      Layers:
      - Ref: LambdaLayer
      Events:
        TapestryDepAPI:
          Type: HttpApi
          Properties:
            Path: /isChildNodeOfTapestry
            Method: get
    Metadata:
      SamResourceId: IsChildNodeOfTapestry
  ReverseEdge:
    Type: AWS::Serverless::Function
    DependsOn:
    - TapestryVPC
    - TapestryVPCSubnet1
    - TapestryVPCSubnet2
    - NeptuneDBInstance
    Properties:
      CodeUri: ReverseEdge
      Handler: index.handler
      Runtime: nodejs16.x
      FunctionName: reverseEdgeTapestry
      VpcConfig:
        SecurityGroupIds:
        - Fn::GetAtt:
          - TapestryVPC
          - DefaultSecurityGroup
        SubnetIds:
        - Ref: TapestryVPCSubnet1
        - Ref: TapestryVPCSubnet2
      Environment:
        Variables:
          NEPTUNE_PORT: 8182
          NEPTUNE_ENDPOINT:
            Fn::GetAtt:
            - NeptuneDBInstance
            - Endpoint
          USE_IAM: false
      Layers:
      - Ref: LambdaLayer
      Events:
        TapestryDepAPI:
          Type: HttpApi
          Properties:
            Path: /reverseEdge
            Method: post
    Metadata:
      SamResourceId: ReverseEdge
  UpdateNodeData:
    Type: AWS::Serverless::Function
    DependsOn:
    - TapestryVPC
    - TapestryVPCSubnet1
    - TapestryVPCSubnet2
    - NeptuneDBInstance
    Properties:
      CodeUri: UpdateNodeData
      Handler: index.handler
      Runtime: nodejs16.x
      FunctionName: updateNodeDataTapestry
      VpcConfig:
        SecurityGroupIds:
        - Fn::GetAtt:
          - TapestryVPC
          - DefaultSecurityGroup
        SubnetIds:
        - Ref: TapestryVPCSubnet1
        - Ref: TapestryVPCSubnet2
      Environment:
        Variables:
          NEPTUNE_PORT: 8182
          NEPTUNE_ENDPOINT:
            Fn::GetAtt:
            - NeptuneDBInstance
            - Endpoint
          USE_IAM: false
      Layers:
      - Ref: LambdaLayer
      Events:
        TapestryDepAPI:
          Type: HttpApi
          Properties:
            Path: /updateNodeData
            Method: post
    Metadata:
      SamResourceId: UpdateNodeData
  UpdateUserProgress:
    Type: AWS::Serverless::Function
    DependsOn:
    - TapestryVPC
    - TapestryVPCSubnet1
    - TapestryVPCSubnet2
    - NeptuneDBInstance
    Properties:
      CodeUri: UpdateUserProgress
      Handler: index.handler
      Runtime: nodejs16.x
      FunctionName: updateUserProgressTapestry
      VpcConfig:
        SecurityGroupIds:
        - Fn::GetAtt:
          - TapestryVPC
          - DefaultSecurityGroup
        SubnetIds:
        - Ref: TapestryVPCSubnet1
        - Ref: TapestryVPCSubnet2
      Environment:
        Variables:
          NEPTUNE_PORT: 8182
          NEPTUNE_ENDPOINT:
            Fn::GetAtt:
            - NeptuneDBInstance
            - Endpoint
          USE_IAM: false
      Layers:
      - Ref: LambdaLayer
      Events:
        TapestryDepAPI:
          Type: HttpApi
          Properties:
            Path: /updateUserProgress
            Method: post
    Metadata:
      SamResourceId: UpdateUserProgress
Outputs:
  TapestryDepApi:
    Description: Here is the URL
    Value:
      Fn::Sub: https://${ServerlessHttpApi}.execute-api.${AWS::Region}.amazonaws.com/
